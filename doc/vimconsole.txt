*vimconsole.txt*	      This is immediate-window for Vim script.

Version: 0.0
Author : rbtnn <naru123456789@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					 *vimconsole-contents*

Variables		|vimconsole-variables|
Commands                |vimconsole-commands|
Functions               |vimconsole-functions|

==============================================================================

This is immediate-window for Vim script.  
It is like Google Chrome Developer Console.  

This use |PrettyPrint()| if install https://github.com/thinca/vim-prettyprint.

==============================================================================
VARIABLES 			          *vimconsole-variables*

* g:vimconsole#height                     *vimconsole-vimconsole#height* 

VimConsole's window height. default: 6


* g:vimconsole#auto_redraw                *vimconsole-vimconsole#auto_redraw* 

When print to VimConsole, call |vimconsole#redraw()|. default: 0


* g:vimconsole#maximum_caching_objects_count
                          *vimconsole-vimconsole#maximum_caching_objects_count* 

Maximum objects count caching by VimConsole. default: 20


* g:vimconsole#plain_mode                 *vimconsole-vimconsole#plain_mode* 

Disable highlight, fold and prefix-string('1-','1|'.. ,etc)
in VimConsole. default: 0


* g:vimconsole#hooks                      *vimconsole-vimconsole#looks* 

This value is `{}`. This can have following keys.

    on_logged: This is a function reference.
               If g:vimconsole#hooks has this key, call this after logging by
               a logging function (vimconsole#log, vimconsole#warn,... ,etc.).

               Example:
>
               function! MyOnLoggedF(context)
                 " `a:context`'s value is such as `{ 'tag' : 'vimconsole#assert' }`.
                 echo a:context.tag
               endfunction
               let g:vimconsole#hooks.on_logged = function('MyOnLoggedF')
<

==============================================================================
COMMANDS 					 *vimconsole-commands*

* :VimConsole {obj}                              *vimconsole-VimConsole*

Print to VimConsole.
Same as `vimconsole#log({obj},...)`.


* :VimConsoleLog {obj}                           *vimconsole-VimConsoleLog*

Print to VimConsole.
Same as `vimconsole#log({obj},...)`.


* :VimConsoleWarn {obj}                          *vimconsole-VimConsoleWarn*

Print to VimConsole.
Same as `vimconsole#warn({obj},...)`.


* :VimConsoleError {obj}                         *vimconsole-VimConsoleError*

Print to VimConsole.
Same as `vimconsole#error({obj},...)`.


* :VimConsoleOpen                                *vimconsole-VimConsoleOpen*

Open VimConsole.


* :VimConsoleClose                               *vimconsole-VimConsoleClose*

Close VimConsole.


* :VimConsoleToggle                              *vimconsole-VimConsoleToggle*

Toggle VimConsole. 


* :VimConsoleClear                               *vimconsole-VimConsoleClear*

Clear logs of VimConsole.


* :VimConsoleRedraw                              *vimconsole-VimConsoleRedraw*

Redraw VimConsole.


==============================================================================
FUNCTIONS 			              *vimconsole-functions*

* vimconsole#assert(expr,obj,...)             *vimconsole-vimconsole#assert()*

It is like javascript's `console.assert({expr},{obj},...)`.
This behavior is printf({obj}, ...) to VimConsole if `0 < a:0`.


* vimconsole#log(obj,...)                    *vimconsole-vimconsole#log()*

It is like javascript's `console.log({obj},...)`.
This behavior is printf({obj}, ...) to VimConsole if `0 < a:0`.


* vimconsole#warn(obj,...)                   *vimconsole-vimconsole#warning()*

It is like javascript's `console.warn({obj},...)`.
This behavior is printf({obj}, ...) to VimConsole if `0 < a:0`.


* vimconsole#error(obj,...)                  *vimconsole-vimconsole#error()*

It is like javascript's `console.error({obj},...)`.
This behavior is printf({obj}, ...) to VimConsole if `0 < a:0`.


* vimconsole#winopen()                        *vimconsole-vimconsole#winopen()*

Same as |VimConsoleOpen|.


* vimconsole#winclose()                       *vimconsole-vimconsole#winclose()*

Same as |VimConsoleClose|.


* vimconsole#wintoggle()                      *vimconsole-vimconsole#wintoggle()*

Same as |VimConsoleToggle|.


* vimconsole#clear()                          *vimconsole-vimconsole#clear()*

Same as |VimConsoleClear|.


* vimconsole#redraw()                         *vimconsole-vimconsole#redraw()*

Same as |VimConsoleRedraw|.


* vimconsole#at(...)                          *vimconsole-vimconsole#at()*

Return the object of the specified line.
The object is deepcopy object. So you can not rewrite the object.
First argument of {...} is a line number at VimConsole. default:`line(".")`
Return `{}` if the argument is invalid.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
